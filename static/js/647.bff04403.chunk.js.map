{"version":3,"file":"static/js/647.bff04403.chunk.js","mappings":"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","sources":["redux/projects/selectors.ts","redux/columns/selectors.ts","redux/tasks/selectors.ts","components/Forms/EditProjectMembersForm/EditProjectMembersForm.styled.ts","components/Forms/EditProjectMembersForm/EditProjectMembersSchema.ts","components/Forms/EditProjectMembersForm/EditProjectMembersForm.tsx","components/Modals/EditProjectMembersModal/EditProjectMembersModal.tsx","components/Forms/EditProjectForm/EditProjectSchema.ts","components/Forms/EditProjectForm/EditProjectForm.styled.ts","components/Forms/EditProjectForm/EditProjectForm.tsx","components/Modals/EditProjectModal/EditProjectModal.tsx","pages/ProjectBoardPage/Header/Header.styled.ts","pages/ProjectBoardPage/Header/Header.tsx","pages/ProjectBoardPage/ProjectBoardPage.styled.ts","components/AssigneeList/AssigneeList.tsx","components/Forms/CreateTaskForm/CreateTaskSchema.ts","components/Forms/CreateTaskForm/CreateTaskForm.tsx","components/Modals/CreateTaskModal/CreateTaskModal.tsx","components/ColumnCard/ColumnCard.styled.ts","components/ColumnCard/ColumnCard.tsx","pages/ProjectBoardPage/ProjectColumns/ProjectColumns.styled.ts","pages/ProjectBoardPage/ProjectColumns/ProjectColumns.tsx","pages/ProjectBoardPage/ProjectBoardPage.tsx"],"sourcesContent":["import { RootState } from \"@/redux/store\";\n\nexport const selectProjects = (state: RootState) => state.projects.items;\nexport const selectCurrentProject = (state: RootState) =>\n  state.projects.current;\nexport const selectProjectsLoading = (state: RootState) =>\n  state.projects.loading;\nexport const selectProjectsError = (state: RootState) => state.projects.error;\n","import { RootState } from \"@/redux/store\";\n\nexport const selectColumns = (state: RootState) => state.columns.items;\nexport const selectColumnsLoading = (state: RootState) => state.columns.loading;\nexport const selectColumnsError = (state: RootState) => state.columns.error;\n","import { RootState } from \"@/redux/store\";\n\nexport const selectTasks = (state: RootState) => state.tasks.items;\nexport const selectTasksLoading = (state: RootState) => state.tasks.loading;\nexport const selectTasksError = (state: RootState) => state.tasks.error;\n\nexport const selectTasksByColumn = (columnId: string) => (state: RootState) =>\n  state.tasks.items.filter((task) => task.column === columnId);\n","import styled from \"styled-components\";\n\nexport const LoadContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 295px;\n`;\n","import * as yup from \"yup\";\n\nexport const EditProjectMembersSchema = yup.object().shape({\n  members: yup\n    .array()\n    .of(\n      yup.object().shape({\n        email: yup.string().email().required(),\n        role: yup.string().oneOf([\"owner\", \"editor\", \"viewer\"]).required(),\n      })\n    )\n    .min(1)\n    .required(),\n});\n","import { useTranslation } from \"react-i18next\";\nimport { Formik } from \"formik\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch, useAppSelector } from \"@/hooks\";\nimport { updateProjectMembers } from \"@/redux/projects/operations\";\nimport { selectCurrentProject } from \"@/redux/projects/selectors\";\nimport Loader from \"@/components/Loader\";\nimport UserList from \"@/components/UserList\";\nimport { StyledForm } from \"@/styles/form/Form.styled\";\nimport { LoadContainer } from \"./EditProjectMembersForm.styled\";\nimport { EditProjectMembersSchema } from \"./EditProjectMembersSchema\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  formName: string;\n  projectId: string;\n  withActions?: boolean;\n};\n\nconst EditProjectMembersForm = ({\n  handlerCloseModal,\n  formName,\n  projectId,\n  withActions = true,\n}: Props) => {\n  const dispatch = useAppDispatch();\n  const project = useAppSelector(selectCurrentProject);\n  const { t } = useTranslation();\n\n  if (!project) {\n    return (\n      <LoadContainer>\n        <Loader size=\"60px\" color=\"#3e85f3\" />\n      </LoadContainer>\n    );\n  }\n\n  const initialValues = {\n    members: project.members.map((m) => ({\n      email: m.user.email,\n      role: m.role,\n    })),\n  };\n\n  const handleSubmit = async (values: typeof initialValues) => {\n    try {\n      await dispatch(\n        updateProjectMembers({ id: projectId, members: values.members })\n      ).unwrap();\n\n      toast.success(t(\"Forms.editProjectMembers.success\") as string);\n      handlerCloseModal();\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.editProjectMembers.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  const companyMembersWithRoles = project.members.map((member) => ({\n    ...member.user,\n    role: member.role,\n  }));\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      validationSchema={EditProjectMembersSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, setFieldValue }) => {\n        return (\n          <StyledForm id={formName}>\n            <UserList\n              value={values.members}\n              users={companyMembersWithRoles}\n              onChange={(updated) => setFieldValue(\"members\", updated)}\n              withActions={withActions}\n              editableRoles\n              availableRoles={[\"owner\", \"editor\", \"viewer\"]}\n            />\n          </StyledForm>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditProjectMembersForm;\n","import { useTranslation } from \"react-i18next\";\nimport Modal from \"@/components/Modal/Modal\";\nimport ModalLayout from \"@/components/Modal/ModalLayout\";\nimport EditProjectMembersForm from \"@/components/Forms/EditProjectMembersForm\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  projectId: string;\n  withActions?: boolean;\n};\n\nconst EditProjectMembersModal = ({\n  handlerCloseModal,\n  projectId,\n  withActions = true,\n}: Props) => {\n  const { t } = useTranslation();\n  const formName = \"edit-project-members-form\";\n\n  return (\n    <Modal handlerCloseModal={handlerCloseModal}>\n      <ModalLayout\n        handlerCloseModal={handlerCloseModal}\n        title={t(\"Modals.editProjectMembers.title\")}\n        formName={formName}\n        withActions={withActions}\n      >\n        <EditProjectMembersForm\n          handlerCloseModal={handlerCloseModal}\n          formName={formName}\n          projectId={projectId}\n          withActions={withActions}\n        />\n      </ModalLayout>\n    </Modal>\n  );\n};\n\nexport default EditProjectMembersModal;\n","import * as yup from \"yup\";\n\nexport const EditProjectSchema = yup.object({\n  name: yup.string().min(2).max(100).required(\"Required\"),\n  description: yup.string().max(1000),\n  deadline: yup.date().nullable(),\n});\n","import styled from \"styled-components\";\n\nexport const LoadContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 295px;\n`;\n","import { useTranslation } from \"react-i18next\";\nimport { Formik } from \"formik\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch, useAppSelector } from \"@/hooks\";\nimport { updateProject } from \"@/redux/projects/operations\";\nimport { selectCurrentProject } from \"@/redux/projects/selectors\";\nimport Loader from \"@/components/Loader\";\nimport { EditProjectSchema } from \"./EditProjectSchema\";\nimport { LoadContainer } from \"./EditProjectForm.styled\";\nimport {\n  ErrorText,\n  Input,\n  InputContainer,\n  Label,\n  StyledForm,\n  Textarea,\n} from \"@/styles/form/Form.styled\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  formName: string;\n  withActions?: boolean;\n};\n\nconst EditProjectForm = ({\n  handlerCloseModal,\n  formName,\n  withActions = true,\n}: Props) => {\n  const dispatch = useAppDispatch();\n  const project = useAppSelector(selectCurrentProject);\n  const { t } = useTranslation();\n\n  if (!project) {\n    return (\n      <LoadContainer>\n        <Loader size=\"60px\" color=\"#3e85f3\" />\n      </LoadContainer>\n    );\n  }\n\n  const handleSubmit = async (values: typeof initialValues) => {\n    try {\n      await dispatch(\n        updateProject({ id: project._id, payload: values })\n      ).unwrap();\n      toast.success(t(\"Forms.editProject.success\") as string);\n      handlerCloseModal();\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.editProject.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  const initialValues = {\n    name: project.name || \"\",\n    description: project.description || \"\",\n    deadline: project.deadline ? project.deadline.slice(0, 10) : \"\",\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={EditProjectSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, errors, touched, handleChange, handleBlur }) => (\n        <StyledForm id={formName}>\n          <InputContainer>\n            <Label>{t(\"Forms.editProject.name\")}</Label>\n            <Input\n              name=\"name\"\n              placeholder={t(\"Forms.editProject.namePlaceholder\")}\n              $hasError={touched.name && !!errors.name}\n              disabled={!withActions}\n            />\n            {touched.name && errors.name && (\n              <ErrorText>{errors.name}</ErrorText>\n            )}\n          </InputContainer>\n\n          <InputContainer>\n            <Label>{t(\"Forms.editProject.description\")}</Label>\n            <Textarea\n              name=\"description\"\n              placeholder={t(\"Forms.editProject.descriptionPlaceholder\")}\n              value={values.description}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              $hasError={touched.description && !!errors.description}\n              disabled={!withActions}\n            />\n            {touched.description && errors.description && (\n              <ErrorText>{errors.description}</ErrorText>\n            )}\n          </InputContainer>\n\n          <InputContainer>\n            <Label>{t(\"Forms.editProject.deadline\")}</Label>\n            <Input name=\"deadline\" type=\"date\" disabled={!withActions} />\n          </InputContainer>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n\nexport default EditProjectForm;\n","import { useTranslation } from \"react-i18next\";\nimport Modal from \"@/components/Modal/Modal\";\nimport ModalLayout from \"@/components/Modal/ModalLayout\";\nimport EditProjectForm from \"@/components/Forms/EditProjectForm\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  deleteAction?: () => void;\n  withActions?: boolean;\n};\n\nconst EditProjectModal = ({\n  handlerCloseModal,\n  deleteAction = () => {},\n  withActions = true,\n}: Props) => {\n  const { t } = useTranslation();\n  const formName = \"edit-project-form\";\n\n  return (\n    <Modal handlerCloseModal={handlerCloseModal}>\n      <ModalLayout\n        handlerCloseModal={handlerCloseModal}\n        title={t(\"Modals.editProject.title\")}\n        formName={formName}\n        deleteAction={deleteAction}\n        withActions={withActions}\n      >\n        <EditProjectForm\n          handlerCloseModal={handlerCloseModal}\n          formName={formName}\n          withActions={withActions}\n        />\n      </ModalLayout>\n    </Modal>\n  );\n};\n\nexport default EditProjectModal;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const HeaderWrapper = styled.header`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-between;\n  gap: 10px;\n  padding: 2px 16px 12px 16px;\n  background-color: ${({ theme }) => theme.background};\n  border-bottom: 1px solid ${({ theme }) => theme.borderColor};\n\n  & div {\n    align-self: center;\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n    gap: 24px;\n    padding: 8px 16px;\n    height: 56px;\n  }\n`;\n\nexport const Title = styled.h1`\n  position: absolute;\n  top: 21%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 20px;\n  font-weight: 700;\n  color: ${({ theme }) => theme.primaryText};\n\n  max-width: 220px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  @media (min-width: 420px) {\n    max-width: 250px;\n  }\n\n  @media (min-width: 768px) {\n    top: 50%;\n  }\n\n  @media (min-width: 900px) {\n    max-width: 300px;\n  }\n\n  @media (min-width: 1280px) {\n    max-width: 50%;\n  }\n`;\n\nexport const BackButton = styled(Link)`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  font-size: 16px;\n  background: none;\n  border: none;\n  font-weight: 500;\n  padding: 10px;\n  color: ${({ theme }) => theme.primaryText};\n  cursor: pointer;\n  transition: color ${({ theme }) => theme.animation};\n\n  &:hover {\n    color: ${({ theme }) => theme.primary};\n  }\n`;\n\nexport const Controls = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  flex-shrink: 0;\n`;\n\nexport const ControlButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${({ theme }) => theme.backgroundSecondary};\n  color: ${({ theme }) => theme.primaryText};\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  transition: color ${({ theme }) => theme.animation};\n\n  &:hover {\n    color: ${({ theme }) => theme.primary};\n  }\n`;\n","import { useTranslation } from \"react-i18next\";\nimport LanguageSwitcher from \"@/components/LanguageSwitcher\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport UserAvatar from \"@/components/UserAvatar\";\nimport {\n  BackButton,\n  ControlButton,\n  Controls,\n  HeaderWrapper,\n  Title,\n} from \"./Header.styled\";\nimport { Link } from \"react-router-dom\";\nimport { FaChevronLeft } from \"react-icons/fa\";\nimport { FiSettings } from \"react-icons/fi\";\nimport { HiUserGroup } from \"react-icons/hi\";\nimport { useMediaQuery } from \"react-responsive\";\n\ntype Props = {\n  name: string;\n  avatar: string;\n  toggleMembersModal: () => void;\n  toggleSettingsModal: () => void;\n};\n\nconst Header = ({\n  name,\n  avatar,\n  toggleMembersModal,\n  toggleSettingsModal,\n}: Props) => {\n  const { t } = useTranslation();\n  const isMobile = useMediaQuery({ query: \"(max-width: 768px)\" });\n\n  return (\n    <>\n      <HeaderWrapper>\n        <BackButton to={\"/\"}>\n          <FaChevronLeft size={16} /> {!isMobile && t(\"Project.backToProjects\")}\n        </BackButton>\n        <Title>{name}</Title>\n        <Controls>\n          <LanguageSwitcher />\n          <ThemeToggle />\n          <ControlButton type=\"button\" onClick={() => toggleMembersModal()}>\n            <HiUserGroup size={20} />\n          </ControlButton>\n          <ControlButton type=\"button\" onClick={() => toggleSettingsModal()}>\n            <FiSettings size={20} />\n          </ControlButton>\n          <Link to=\"/account\">\n            <UserAvatar src={avatar} size={36} />\n          </Link>\n        </Controls>\n      </HeaderWrapper>\n    </>\n  );\n};\n\nexport default Header;\n","import styled from \"styled-components\";\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n`;\n\nexport const LoadContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background-color: ${({ theme }) => theme.background};\n`;\n\nexport const BoardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  background-color: ${({ theme }) => theme.background};\n`;\n","import { useEffect, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch, useAppSelector } from \"@/hooks\";\nimport { searchProjectMembers } from \"@/redux/projects/operations\";\nimport { selectCurrentProject } from \"@/redux/projects/selectors\";\nimport { UserBase } from \"@/redux/user/user.types\";\nimport UserList from \"@/components/UserList\";\nimport {\n  Wrapper,\n  Dropdown,\n  Option,\n} from \"@/components/CustomSelect/CustomSelect.styled\";\n\ntype Props = {\n  value: UserBase[];\n  onChange: (updated: UserBase[]) => void;\n  placeholder?: string;\n};\n\nconst AssigneeList = ({\n  value,\n  onChange,\n  placeholder = \"Search...\",\n}: Props) => {\n  const dispatch = useAppDispatch();\n  const project = useAppSelector(selectCurrentProject);\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<UserBase[]>([]);\n  const [open, setOpen] = useState(false);\n  const [position, setPosition] = useState({ top: 0, left: 0, width: 0 });\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dropdownRef = useRef<HTMLUListElement>(null);\n  const timeoutRef = useRef<number>(0);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (!query.trim() || !project?._id) {\n      setResults([]);\n      return;\n    }\n\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n\n    timeoutRef.current = window.setTimeout(async () => {\n      try {\n        const data = await dispatch(\n          searchProjectMembers({ projectId: project._id, query })\n        ).unwrap();\n        setResults(data);\n        setOpen(true);\n      } catch (error) {\n        toast.error(\n          `${t(\"Forms.createTask.searchFailed\")}: ${\n            error instanceof Error ? error.message : String(error)\n          }`\n        );\n        setResults([]);\n      }\n    }, 400);\n\n    return () => clearTimeout(timeoutRef.current);\n  }, [query, project, dispatch, t]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      const rect = inputRef.current.getBoundingClientRect();\n      setPosition({\n        top: rect.bottom + 4,\n        left: rect.left,\n        width: rect.width,\n      });\n    }\n  }, [open, results]);\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      const target = e.target as Node;\n      if (\n        !inputRef.current?.contains(target) &&\n        !dropdownRef.current?.contains(target)\n      ) {\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  const handleSelect = (user: UserBase) => {\n    if (!value.find((u) => u._id === user._id)) {\n      onChange([...value, user]);\n    }\n    setQuery(\"\");\n    setResults([]);\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <input\n          ref={inputRef}\n          value={query}\n          placeholder={placeholder}\n          onChange={(e) => setQuery(e.target.value)}\n          onFocus={() => results.length && setOpen(true)}\n          style={{\n            width: \"100%\",\n            padding: \"8px 12px\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"6px\",\n            fontSize: \"14px\",\n          }}\n        />\n        {open &&\n          createPortal(\n            <Dropdown\n              ref={dropdownRef}\n              $top={position.top}\n              $left={position.left}\n              $width={position.width}\n            >\n              {results.map((user) => (\n                <Option key={user._id} onClick={() => handleSelect(user)}>\n                  {user.name} ({user.email})\n                </Option>\n              ))}\n            </Dropdown>,\n            document.body\n          )}\n      </Wrapper>\n      <UserList\n        users={value}\n        withActions={true}\n        onChange={(updatedUsers) => onChange(updatedUsers as UserBase[])}\n        viewMode\n      />\n    </>\n  );\n};\n\nexport default AssigneeList;\n","import * as yup from \"yup\";\n\nexport const createTaskSchema = yup.object({\n  title: yup.string().min(2).max(200).required(),\n  description: yup.string().max(2000).nullable(),\n  assignedTo: yup.array().of(yup.string()),\n  priority: yup\n    .mixed<\"low\" | \"medium\" | \"high\" | \"critical\">()\n    .oneOf([\"low\", \"medium\", \"high\", \"critical\"])\n    .default(\"medium\"),\n  deadline: yup.date().nullable(),\n});\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Formik } from \"formik\";\nimport { toast } from \"react-toastify\";\nimport { useTheme } from \"styled-components\";\nimport { useAppDispatch, useAppSelector } from \"@/hooks\";\nimport { createTask } from \"@/redux/tasks/operations\";\nimport { selectCurrentProject } from \"@/redux/projects/selectors\";\nimport { UserBase } from \"@/redux/user/user.types\";\nimport { TaskPriority } from \"@/redux/tasks/tasks.types\";\nimport CustomSelect from \"@/components/CustomSelect\";\nimport AssigneeList from \"@/components/AssigneeList\";\nimport { createTaskSchema } from \"./CreateTaskSchema\";\nimport {\n  StyledForm,\n  InputContainer,\n  Label,\n  Input,\n  ErrorText,\n  Textarea,\n} from \"@/styles/form/Form.styled\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  formName: string;\n  columnId?: string;\n};\n\nconst initialValues = {\n  title: \"\",\n  description: \"\",\n  deadline: \"\",\n  priority: \"medium\",\n};\n\nconst CreateTaskForm = ({ handlerCloseModal, formName, columnId }: Props) => {\n  const dispatch = useAppDispatch();\n  const project = useAppSelector(selectCurrentProject);\n  const [assignees, setAssignees] = useState<UserBase[]>([]);\n  const { t } = useTranslation();\n  const theme = useTheme();\n\n  const priorityColors: Record<TaskPriority, string> = {\n    low: theme.priorityTextLow,\n    medium: theme.priorityTextMedium,\n    high: theme.priorityTextHigh,\n    critical: theme.priorityTextCritical,\n  };\n\n  const handleSubmit = async (values: typeof initialValues) => {\n    if (!project?._id || !columnId) {\n      toast.error(t(\"Forms.createTask.failed\") as string);\n      return;\n    }\n\n    const payload = {\n      ...values,\n      project: project._id,\n      column: columnId,\n      assignedTo: assignees.map((u) => u._id),\n      priority: values.priority as TaskPriority,\n    };\n\n    try {\n      await dispatch(createTask(payload)).unwrap();\n      toast.success(t(\"Forms.createTask.success\") as string);\n      handlerCloseModal();\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.createTask.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={createTaskSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, errors, touched, handleChange, handleBlur }) => (\n        <StyledForm id={formName}>\n          <InputContainer>\n            <Label>{t(\"Forms.createTask.title\")}</Label>\n            <Input\n              name=\"title\"\n              placeholder={t(\"Forms.createTask.titlePlaceholder\")}\n              $hasError={touched.title && !!errors.title}\n            />\n            {touched.title && errors.title && (\n              <ErrorText>{errors.title}</ErrorText>\n            )}\n          </InputContainer>\n\n          <InputContainer>\n            <Label>{t(\"Forms.createTask.description\")}</Label>\n            <Textarea\n              name=\"description\"\n              placeholder={t(\"Forms.createTask.descriptionPlaceholder\")}\n              value={values.description}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              $hasError={touched.description && !!errors.description}\n            />\n            {touched.description && errors.description && (\n              <ErrorText>{errors.description}</ErrorText>\n            )}\n          </InputContainer>\n\n          <InputContainer>\n            <Label>{t(\"Forms.createTask.deadline\")}</Label>\n            <Input name=\"deadline\" type=\"date\" />\n          </InputContainer>\n\n          <InputContainer>\n            <Label>{t(\"Forms.createTask.priority\")}</Label>\n            <CustomSelect\n              options={[\"low\", \"medium\", \"high\", \"critical\"]}\n              value={values.priority as TaskPriority}\n              onChange={(value) => {\n                handleChange({\n                  target: { name: \"priority\", value },\n                });\n              }}\n              getLabel={(p) => t(`Common.priority.${p}`)}\n              getKey={(p) => p}\n              getColor={(p) => priorityColors[p as TaskPriority]}\n              placeholder={t(\"Forms.createTask.priority\")}\n            />\n          </InputContainer>\n\n          <InputContainer>\n            <Label>{t(\"Forms.createTask.assignedTo\")}</Label>\n            <AssigneeList\n              value={assignees}\n              onChange={setAssignees}\n              placeholder={t(\"Forms.createTask.assigneePlaceholder\")}\n            />\n          </InputContainer>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n\nexport default CreateTaskForm;\n","import { useTranslation } from \"react-i18next\";\nimport Modal from \"@/components/Modal/Modal\";\nimport ModalLayout from \"@/components/Modal/ModalLayout\";\nimport CreateTaskForm from \"@/components/Forms/CreateTaskForm\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  columnId?: string;\n};\n\nconst CreateTaskModal = ({ handlerCloseModal, columnId }: Props) => {\n  const { t } = useTranslation();\n  const formName = \"create-task-form\";\n\n  return (\n    <Modal handlerCloseModal={handlerCloseModal}>\n      <ModalLayout\n        handlerCloseModal={handlerCloseModal}\n        title={t(\"Modals.createTask.title\")}\n        formName={formName}\n      >\n        <CreateTaskForm\n          handlerCloseModal={handlerCloseModal}\n          formName={formName}\n          columnId={columnId}\n        />\n      </ModalLayout>\n    </Modal>\n  );\n};\n\nexport default CreateTaskModal;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div<{ isEmpty?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 290px;\n  min-height: 100%;\n  padding: ${({ isEmpty }) => (isEmpty ? \"0\" : \"16px\")};\n  color: ${({ theme }) => theme.secondaryText};\n  background-color: ${({ theme }) => theme.backgroundSecondary};\n  border: 2px dashed ${({ theme }) => theme.borderColor};\n  border-radius: 8px;\n  cursor: default;\n`;\n\nexport const Placeholder = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 290px;\n  height: 100%;\n  padding: 16px;\n  font-size: 16px;\n  text-align: center;\n  cursor: pointer;\n`;\n\nexport const AddButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 6px;\n  background-color: transparent;\n  color: ${({ theme }) => theme.secondaryText};\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  transition: color ${({ theme }) => theme.animation};\n\n  &:hover {\n    color: ${({ theme }) => theme.primary};\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Title = styled.h3`\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme }) => theme.primaryText};\n  word-break: break-word;\n  overflow-wrap: break-word;\n`;\n\nexport const TitleInput = styled.input`\n  font-size: 16px;\n  font-weight: 600;\n  width: 100%;\n  background-color: transparent;\n  border: none;\n  padding: 0px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const InlineControls = styled.div`\n  display: flex;\n  gap: 4px;\n`;\n\nexport const ControlButton = styled.button<{ hoverColor?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: transparent;\n  color: ${({ theme }) => theme.primaryText};\n  border: none;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  transition: color ${({ theme }) => theme.animation};\n\n  &:hover {\n    color: ${({ hoverColor, theme }) => hoverColor || theme.primary};\n  }\n`;\n\nexport const Tasks = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { useTheme } from \"styled-components\";\nimport { FiEdit3, FiTrash2, FiCheck, FiX, FiPlus } from \"react-icons/fi\";\nimport { useAppDispatch } from \"@/hooks\";\nimport { deleteColumn, updateColumn } from \"@/redux/columns/operations\";\nimport { ColumnWithTasks } from \"@/redux/columns/columns.types\";\nimport CreateTaskModal from \"../Modals/CreateTaskModal\";\nimport {\n  Wrapper,\n  Header,\n  Title,\n  TitleInput,\n  Tasks,\n  Placeholder,\n  InlineControls,\n  ControlButton,\n  AddButton,\n} from \"./ColumnCard.styled\";\n\ntype Props = {\n  column?: ColumnWithTasks;\n  isEmpty?: boolean;\n  withActions?: boolean;\n  isEditable?: boolean;\n  onClickEmpty?: () => void;\n};\n\nconst ColumnCard = ({\n  column,\n  isEmpty,\n  withActions,\n  isEditable = false,\n  onClickEmpty,\n}: Props) => {\n  const dispatch = useAppDispatch();\n  const [isEditing, setIsEditing] = useState(false);\n  const [title, setTitle] = useState(column?.name || \"\");\n  const [isCreateTaskModalOpen, setIsCreateTaskModalOpen] = useState(false);\n  const { t } = useTranslation();\n  const theme = useTheme();\n\n  if (isEmpty) {\n    if (!withActions) return null;\n\n    return (\n      <Wrapper isEmpty onClick={onClickEmpty}>\n        <Placeholder>\n          <AddButton>\n            <FiPlus size={16} /> {t(\"Project.columns.addColumn\")}\n          </AddButton>\n        </Placeholder>\n      </Wrapper>\n    );\n  }\n\n  const handleSave = () => {\n    if (!column?._id) return;\n\n    try {\n      dispatch(\n        updateColumn({\n          id: column._id,\n          data: { name: title },\n        })\n      );\n    } catch (error) {\n      toast.error(\n        `${t(\"Project.columns.updateFailed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    } finally {\n      setIsEditing(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setTitle(column?.name || \"\");\n    setIsEditing(false);\n  };\n\n  const handleDelete = () => {\n    if (!column?._id) return;\n\n    try {\n      dispatch(deleteColumn(column._id));\n    } catch (error) {\n      toast.error(\n        `${t(\"Project.columns.deleteFailed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  const toggleCreateTaskModal = () => {\n    setIsCreateTaskModalOpen((prev) => !prev);\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <Header>\n          {isEditing ? (\n            <>\n              <TitleInput\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                autoFocus\n              />\n              <InlineControls>\n                <ControlButton\n                  type=\"button\"\n                  hoverColor={theme.success}\n                  onClick={() => handleSave()}\n                >\n                  <FiCheck size={20} />\n                </ControlButton>\n                <ControlButton\n                  type=\"button\"\n                  hoverColor={theme.primaryHover}\n                  onClick={() => handleCancel()}\n                >\n                  <FiX size={20} />\n                </ControlButton>\n                <ControlButton\n                  type=\"button\"\n                  hoverColor={theme.danger}\n                  onClick={() => handleDelete()}\n                >\n                  <FiTrash2 size={20} />\n                </ControlButton>\n              </InlineControls>\n            </>\n          ) : (\n            <>\n              <Title>{column?.name}</Title>\n              {withActions && (\n                <InlineControls>\n                  {isEditable && (\n                    <ControlButton\n                      type=\"button\"\n                      onClick={() => setIsEditing(true)}\n                    >\n                      <FiEdit3 size={20} />\n                    </ControlButton>\n                  )}\n                  <ControlButton\n                    type=\"button\"\n                    onClick={() => toggleCreateTaskModal()}\n                  >\n                    <FiPlus size={20} />\n                  </ControlButton>\n                </InlineControls>\n              )}\n            </>\n          )}\n        </Header>\n\n        <Tasks>\n          {column?.tasks.map((task) => (\n            <div key={task._id}>{task.title}</div>\n          ))}\n        </Tasks>\n\n        {withActions && (\n          <AddButton type=\"button\" onClick={() => toggleCreateTaskModal()}>\n            <FiPlus size={16} /> {t(\"Project.columns.addTask\")}\n          </AddButton>\n        )}\n      </Wrapper>\n\n      {isCreateTaskModalOpen && (\n        <CreateTaskModal\n          handlerCloseModal={toggleCreateTaskModal}\n          columnId={column?._id}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ColumnCard;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  gap: 24px;\n  width: 100%;\n  height: 100%;\n  padding: 24px;\n  overflow-x: auto;\n`;\n\nexport const EditOrderButton = styled.button<{ topOffset: number }>`\n  position: fixed;\n  top: ${({ topOffset }) => `${topOffset}px`};\n  right: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${({ theme }) => theme.backgroundSecondary};\n  color: ${({ theme }) => theme.primaryText};\n  border: 1px solid ${({ theme }) => theme.borderColor};\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n  transition: color ${({ theme }) => theme.animation},\n    border-color ${({ theme }) => theme.animation};\n\n  &:hover {\n    color: ${({ theme }) => theme.primary};\n    border-color: ${({ theme }) => theme.primary};\n  }\n\n  &[data-active=\"true\"] {\n    color: ${({ theme }) => theme.invertedText};\n    background-color: ${({ theme }) => theme.primary};\n    border-color: ${({ theme }) => theme.primary};\n  }\n`;\n\nexport const ColumnsRow = styled.div`\n  display: flex;\n  height: 100%;\n  gap: 24px;\n`;\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch, useAppSelector } from \"@/hooks\";\nimport { selectCurrentProject } from \"@/redux/projects/selectors\";\nimport { createColumn, reorderColumns } from \"@/redux/columns/operations\";\nimport { ColumnWithTasks } from \"@/redux/columns/columns.types\";\nimport ColumnCard from \"@/components/ColumnCard\";\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n  DropResult,\n} from \"@hello-pangea/dnd\";\nimport { TbEdit } from \"react-icons/tb\";\nimport { Wrapper, ColumnsRow, EditOrderButton } from \"./ProjectColumns.styled\";\n\ntype Props = {\n  columns: ColumnWithTasks[];\n  topOffset?: number;\n  withActions?: boolean;\n  onEditOrder?: () => void;\n};\n\nconst ProjectColumns = ({\n  columns,\n  topOffset = 24,\n  withActions = false,\n  onEditOrder,\n}: Props) => {\n  const dispatch = useAppDispatch();\n  const projectId = useAppSelector(selectCurrentProject)?._id;\n  const [isEditMode, setIsEditMode] = useState(false);\n  const { t } = useTranslation();\n\n  const toggleEditMode = () => setIsEditMode((prev) => !prev);\n\n  const getSortedColumns = () => {\n    return [...columns].sort((a, b) => a.order - b.order);\n  };\n\n  const handleAddColumn = () => {\n    if (!projectId) return;\n\n    try {\n      const newColumn = {\n        name: t(\"Project.columns.newColumn\") as string,\n        order: columns.length,\n        project: projectId,\n      };\n\n      dispatch(createColumn(newColumn));\n    } catch (error) {\n      toast.error(\n        `${t(\"Project.columns.addFailed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  const handleDragEnd = (result: DropResult) => {\n    if (!isEditMode) return;\n    if (!result.destination) return;\n\n    const { source, destination } = result;\n    if (source.index === destination.index) return;\n\n    const sortedColumns = getSortedColumns();\n\n    const reordered = [...sortedColumns];\n    const [moved] = reordered.splice(source.index, 1);\n    reordered.splice(destination.index, 0, moved);\n\n    const updatedColumns = reordered.map((col, index) => ({\n      ...col,\n      order: index,\n    }));\n\n    try {\n      dispatch(\n        reorderColumns({\n          columns: updatedColumns.map((col) => ({\n            id: col._id,\n            order: col.order,\n          })),\n        })\n      );\n    } catch (error) {\n      toast.error(\n        `${t(\"Project.columns.reorderFailed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  return (\n    <Wrapper>\n      {withActions && (\n        <EditOrderButton\n          type=\"button\"\n          topOffset={topOffset + 24}\n          data-active={isEditMode}\n          onClick={() => {\n            toggleEditMode();\n            onEditOrder?.();\n          }}\n        >\n          <TbEdit size={20} />\n        </EditOrderButton>\n      )}\n\n      {isEditMode ? (\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <Droppable droppableId=\"columns\" direction=\"horizontal\" type=\"column\">\n            {(provided) => (\n              <ColumnsRow ref={provided.innerRef} {...provided.droppableProps}>\n                {getSortedColumns().map((column, index) => (\n                  <Draggable\n                    draggableId={column._id}\n                    index={index}\n                    key={column._id}\n                  >\n                    {(provided) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <ColumnCard\n                          column={column}\n                          withActions={withActions}\n                          isEditable={isEditMode}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </ColumnsRow>\n            )}\n          </Droppable>\n        </DragDropContext>\n      ) : (\n        <ColumnsRow>\n          {getSortedColumns().map((column) => (\n            <ColumnCard\n              key={column._id}\n              column={column}\n              withActions={withActions}\n            />\n          ))}\n        </ColumnsRow>\n      )}\n      {isEditMode && (\n        <ColumnCard\n          isEmpty\n          withActions={withActions}\n          onClickEmpty={() => handleAddColumn()}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ProjectColumns;\n","import { useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch, useAppSelector } from \"@/hooks\";\nimport { selectUser } from \"@/redux/user/selectors\";\nimport { deleteProject, fetchProjectById } from \"@/redux/projects/operations\";\nimport {\n  selectCurrentProject,\n  selectProjectsLoading,\n} from \"@/redux/projects/selectors\";\nimport { selectColumns } from \"@/redux/columns/selectors\";\nimport { selectTasks } from \"@/redux/tasks/selectors\";\nimport Loader from \"@/components/Loader\";\nimport EditProjectMembersModal from \"@/components/Modals/EditProjectMembersModal/EditProjectMembersModal\";\nimport EditProjecModal from \"@/components/Modals/EditProjectModal\";\nimport Header from \"./Header\";\nimport {\n  BoardContainer,\n  LoadContainer,\n  PageWrapper,\n} from \"./ProjectBoardPage.styled\";\nimport ProjectColumns from \"./ProjectColumns\";\n\nconst ProjectBoardPage = () => {\n  const { id: projectId } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const currentUser = useAppSelector(selectUser);\n  const project = useAppSelector(selectCurrentProject);\n  const isLoading = useAppSelector(selectProjectsLoading);\n  const columns = useAppSelector(selectColumns);\n  const tasks = useAppSelector(selectTasks);\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [headerHeight, setHeaderHeight] = useState(0);\n  const [isEditMembersModalOpen, setIsEditMembersModalOpen] = useState(false);\n  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);\n  const [canEditProject, setCanEditProject] = useState(false);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (!headerRef.current) return;\n\n    const observer = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        setHeaderHeight(entry.contentRect.height);\n      }\n    });\n\n    observer.observe(headerRef.current);\n\n    return () => observer.disconnect();\n  }, []);\n\n  useEffect(() => {\n    if (projectId) {\n      dispatch(fetchProjectById(projectId));\n    }\n  }, [dispatch, projectId]);\n\n  useEffect(() => {\n    const owners =\n      project?.members\n        ?.filter((member) => member.role === \"owner\")\n        .map((member) => member.user._id) || [];\n\n    const isCurrentUserOwner = owners.includes(currentUser._id);\n    setCanEditProject(isCurrentUserOwner);\n  }, [currentUser, project]);\n  const handleDelete = async () => {\n    if (!projectId || !project) return;\n\n    try {\n      await dispatch(deleteProject(project._id));\n      toast.success(t(\"Forms.deleteProject.success\") as string);\n      toggleSettingsModal();\n      navigate(\"/\", { replace: true });\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.deleteProject.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  const toggleMembersModal = () => {\n    setIsEditMembersModalOpen((prev) => !prev);\n  };\n\n  const toggleSettingsModal = () => {\n    setIsSettingsModalOpen((prev) => !prev);\n  };\n\n  const tasksByColumn: Record<string, typeof tasks> = tasks.reduce(\n    (acc, task) => {\n      if (!acc[task.column]) {\n        acc[task.column] = [];\n      }\n      acc[task.column].push(task);\n      return acc;\n    },\n    {} as Record<string, typeof tasks>\n  );\n\n  return (\n    <PageWrapper>\n      <div ref={headerRef}>\n        <Header\n          name={project?.name || \"\"}\n          avatar={currentUser.avatar}\n          toggleMembersModal={toggleMembersModal}\n          toggleSettingsModal={toggleSettingsModal}\n        />\n      </div>\n\n      {isLoading ? (\n        <LoadContainer>\n          <Loader size=\"60px\" color=\"#3e85f3\" />\n        </LoadContainer>\n      ) : (\n        <BoardContainer>\n          <ProjectColumns\n            columns={columns.map((c) => ({\n              ...c,\n              tasks: tasksByColumn[c._id] || [],\n            }))}\n            topOffset={headerHeight}\n            withActions={canEditProject}\n          />\n        </BoardContainer>\n      )}\n\n      {isEditMembersModalOpen && (\n        <EditProjectMembersModal\n          handlerCloseModal={() => toggleMembersModal()}\n          projectId={projectId || \"\"}\n          withActions={canEditProject}\n        />\n      )}\n\n      {isSettingsModalOpen && (\n        <EditProjecModal\n          handlerCloseModal={() => toggleSettingsModal()}\n          deleteAction={() => handleDelete()}\n          withActions={canEditProject}\n        />\n      )}\n    </PageWrapper>\n  );\n};\n\nexport default ProjectBoardPage;\n"],"names":["selectProjects","state","projects","items","selectCurrentProject","current","selectProjectsLoading","loading","selectColumns","columns","selectTasks","tasks","LoadContainer","styled","div","EditProjectMembersSchema","yup","shape","members","of","email","required","role","oneOf","min","_ref","handlerCloseModal","formName","projectId","withActions","dispatch","useAppDispatch","project","useAppSelector","t","useTranslation","_jsx","children","Loader","size","color","initialValues","map","m","user","companyMembersWithRoles","member","Formik","enableReinitialize","validationSchema","onSubmit","async","updateProjectMembers","id","values","unwrap","toast","success","error","Error","message","String","_ref2","setFieldValue","StyledForm","UserList","value","users","onChange","updated","editableRoles","availableRoles","Modal","ModalLayout","title","EditProjectMembersForm","EditProjectSchema","name","max","description","deadline","nullable","slice","updateProject","_id","payload","errors","touched","handleChange","handleBlur","_jsxs","InputContainer","Label","Input","placeholder","$hasError","disabled","ErrorText","Textarea","onBlur","type","deleteAction","EditProjectForm","HeaderWrapper","header","theme","background","borderColor","Title","h1","_ref3","primaryText","BackButton","Link","_ref4","_ref5","animation","_ref6","primary","Controls","ControlButton","button","_ref7","backgroundSecondary","_ref8","_ref9","_ref10","avatar","toggleMembersModal","toggleSettingsModal","isMobile","useMediaQuery","query","_Fragment","to","FaChevronLeft","LanguageSwitcher","ThemeToggle","onClick","HiUserGroup","FiSettings","UserAvatar","src","PageWrapper","BoardContainer","setQuery","useState","results","setResults","open","setOpen","position","setPosition","top","left","width","inputRef","useRef","dropdownRef","timeoutRef","useEffect","trim","clearTimeout","window","setTimeout","data","searchProjectMembers","rect","getBoundingClientRect","bottom","handleClickOutside","e","_inputRef$current","_dropdownRef$current","target","contains","document","addEventListener","removeEventListener","Wrapper","ref","onFocus","length","style","padding","border","borderRadius","fontSize","createPortal","Dropdown","$top","$left","$width","Option","find","u","handleSelect","body","updatedUsers","viewMode","createTaskSchema","assignedTo","priority","default","columnId","assignees","setAssignees","useTheme","priorityColors","low","priorityTextLow","medium","priorityTextMedium","high","priorityTextHigh","critical","priorityTextCritical","column","createTask","CustomSelect","options","getLabel","p","getKey","getColor","AssigneeList","CreateTaskForm","isEmpty","secondaryText","Placeholder","AddButton","Header","h3","TitleInput","input","InlineControls","_ref11","hoverColor","Tasks","isEditable","onClickEmpty","isEditing","setIsEditing","setTitle","isCreateTaskModalOpen","setIsCreateTaskModalOpen","FiPlus","toggleCreateTaskModal","prev","autoFocus","handleSave","updateColumn","FiCheck","primaryHover","FiX","danger","handleDelete","deleteColumn","FiTrash2","FiEdit3","task","CreateTaskModal","EditOrderButton","topOffset","invertedText","ColumnsRow","_useAppSelector","onEditOrder","isEditMode","setIsEditMode","getSortedColumns","sort","a","b","order","TbEdit","DragDropContext","onDragEnd","result","destination","source","index","reordered","moved","splice","updatedColumns","col","reorderColumns","Droppable","droppableId","direction","provided","innerRef","droppableProps","Draggable","draggableId","draggableProps","dragHandleProps","ColumnCard","handleAddColumn","newColumn","createColumn","ProjectBoardPage","useParams","navigate","useNavigate","currentUser","selectUser","isLoading","headerRef","headerHeight","setHeaderHeight","isEditMembersModalOpen","setIsEditMembersModalOpen","isSettingsModalOpen","setIsSettingsModalOpen","canEditProject","setCanEditProject","observer","ResizeObserver","entries","entry","contentRect","height","observe","disconnect","fetchProjectById","_project$members","isCurrentUserOwner","filter","includes","tasksByColumn","reduce","acc","push","ProjectColumns","c","EditProjectMembersModal","EditProjecModal","deleteProject","replace"],"sourceRoot":""}