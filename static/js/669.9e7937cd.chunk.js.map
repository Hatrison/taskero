{"version":3,"file":"static/js/669.9e7937cd.chunk.js","mappings":"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","sources":["components/ImageUploadField/ImageUploadField.styled.ts","components/ImageUploadField/ImageUploadField.tsx","components/Forms/EditCompanyForm/EditCompanyForm.styled.ts","components/Forms/EditCompanyForm/EditCompanySchema.ts","components/Forms/EditCompanyForm/EditCompanyForm.tsx","components/Modals/EditCompanyModal/EditCompanyModal.tsx","components/Forms/EditCompanyMembersForm/EditCompanyMembersForm.styled.ts","components/Forms/EditCompanyMembersForm/EditCompanyMembersSchema.ts","components/Forms/EditCompanyMembersForm/EditCompanyMembersForm.tsx","components/Modals/EditCompanyMembersModal/EditCompanyMembersModal.tsx","components/CompanyCard/CompanyCard.styled.ts","components/CompanyCard/CompanyCard.tsx","components/Forms/CreateCompanyForm/CreateCompanySchema.ts","components/Forms/CreateCompanyForm/CreateCompanyForm.tsx","components/Modals/CreateCompanyModal/CreateCompanyModal.tsx","pages/CompanyPage/CompanyPage.styled.ts","pages/CompanyPage/CompanyPage.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FileDropZone = styled.div<{ isDragActive: boolean }>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: ${({ theme, isDragActive }) =>\n    isDragActive ? theme.background : theme.backgroundSecondary};\n  border: 2px dashed\n    ${({ theme, isDragActive }) =>\n      isDragActive ? theme.primary : theme.borderColor};\n  border-radius: 8px;\n  padding: 32px 24px;\n  text-align: center;\n  cursor: pointer;\n  gap: 12px;\n  transition: background-color ${({ theme }) => theme.animation},\n    border-color ${({ theme }) => theme.animation};\n`;\n\nexport const UploadText = styled.div`\n  color: ${({ theme }) => theme.secondaryText};\n`;\n\nexport const UploadButton = styled.button`\n  padding: 8px 16px;\n  background-color: ${({ theme }) => theme.background};\n  color: ${({ theme }) => theme.secondaryText};\n  border: 1px solid ${({ theme }) => theme.borderColor};\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: 400;\n  cursor: pointer;\n  transition: background-color ${({ theme }) => theme.animation};\n\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundSecondary};\n  }\n`;\n\nexport const PreviewImage = styled.img`\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 12px;\n  background-color: #ccc;\n`;\n\nexport const HiddenFileInput = styled.input`\n  display: none;\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 64px;\n  height: 64px;\n`;\n","import { useRef, useState, useEffect } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { useField } from \"formik\";\nimport { FaRegBuilding } from \"react-icons/fa\";\nimport {\n  FileDropZone,\n  HiddenFileInput,\n  PreviewImage,\n  UploadText,\n  UploadButton,\n  IconWrapper,\n} from \"./ImageUploadField.styled\";\nimport { ErrorText } from \"@/styles/form/Form.styled\";\n\ntype Props = {\n  name: string;\n  placeholderText: string;\n  buttonText: string;\n  initialPreview?: string | null;\n};\n\nconst ImageUploadField = ({\n  name,\n  placeholderText,\n  buttonText,\n  initialPreview = null,\n}: Props) => {\n  const theme = useTheme();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [field, meta, helpers] = useField(name);\n  const [preview, setPreview] = useState<string | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n\n  useEffect(() => {\n    if (!field.value && initialPreview) {\n      setPreview(initialPreview);\n    }\n  }, [initialPreview, field.value]);\n\n  const handleFileChange = (file: File) => {\n    helpers.setValue(file);\n    setPreview(URL.createObjectURL(file));\n  };\n\n  const onDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragActive(true);\n  };\n  const onDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragActive(false);\n  };\n  const onDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n  const onDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragActive(false);\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      handleFileChange(file);\n    }\n  };\n\n  return (\n    <>\n      <FileDropZone\n        onClick={() => fileInputRef.current?.click()}\n        isDragActive={dragActive}\n        onDragEnter={onDragEnter}\n        onDragLeave={onDragLeave}\n        onDragOver={onDragOver}\n        onDrop={onDrop}\n      >\n        {preview ? (\n          <PreviewImage src={preview} alt=\"Preview\" />\n        ) : (\n          <>\n            <IconWrapper>\n              <FaRegBuilding size={48} color={theme.secondaryText} />\n            </IconWrapper>\n            <UploadText>{placeholderText}</UploadText>\n            <UploadButton type=\"button\">{buttonText}</UploadButton>\n          </>\n        )}\n      </FileDropZone>\n\n      <HiddenFileInput\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={(e) => {\n          const file = e.target.files?.[0];\n          if (file) {\n            handleFileChange(file);\n          }\n        }}\n      />\n\n      {meta.touched && meta.error && <ErrorText>{meta.error}</ErrorText>}\n    </>\n  );\n};\n\nexport default ImageUploadField;\n","import styled from \"styled-components\";\n\nexport const LoadContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 295px;\n`;\n","import * as yup from \"yup\";\n\nexport const EditCompanySchema = yup.object({\n  name: yup.string().required(\"Required\"),\n  logo: yup.mixed().nullable(),\n});\n","import { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch } from \"@/hooks\";\nimport { fetchCompanyById, updateCompany } from \"@/redux/companies/operations\";\nimport { Company } from \"@/redux/companies/companies.types\";\nimport Loader from \"@/components/Loader\";\nimport ImageUploadField from \"@/components/ImageUploadField\";\nimport { FormikSubmitObserver } from \"@/components/Modal\";\nimport {\n  StyledForm,\n  InputContainer,\n  Label,\n  Input,\n  ErrorText,\n} from \"@/styles/form/Form.styled\";\nimport { LoadContainer } from \"./EditCompanyForm.styled\";\nimport { EditCompanySchema } from \"./EditCompanySchema\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  formName: string;\n  companyId: string;\n};\n\nconst EditCompanyForm = ({ handlerCloseModal, formName, companyId }: Props) => {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n  const [company, setCompany] = useState<Company | null>(null);\n\n  useEffect(() => {\n    const loadCompany = async () => {\n      try {\n        const result = await dispatch(fetchCompanyById(companyId)).unwrap();\n        setCompany(result);\n      } catch (error) {\n        toast.error(\n          `${t(\"Forms.editCompany.failedToLoad\")}: ${\n            error instanceof Error ? error.message : String(error)\n          }`\n        );\n        handlerCloseModal();\n      }\n    };\n\n    loadCompany();\n  }, [dispatch, companyId, t, handlerCloseModal]);\n\n  const initialValues = {\n    name: company?.name || \"\",\n    logo: null as File | null,\n  };\n\n  const handleSubmit = async (values: typeof initialValues) => {\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n\n    if (values.logo) {\n      formData.append(\"logo\", values.logo);\n    }\n\n    try {\n      await dispatch(updateCompany({ id: companyId, formData })).unwrap();\n      toast.success(t(\"Forms.editCompany.success\") as string);\n      handlerCloseModal();\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.editCompany.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  return !company ? (\n    <LoadContainer>\n      <Loader size=\"60px\" color=\"#3e85f3\" />\n    </LoadContainer>\n  ) : (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      validationSchema={EditCompanySchema}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <>\n          <FormikSubmitObserver />\n\n          <StyledForm id={formName}>\n            <InputContainer>\n              <Label>{t(\"Forms.editCompany.name\")}</Label>\n              <Input\n                name=\"name\"\n                placeholder={t(\"Forms.editCompany.namePlaceholder\")}\n                $hasError={touched.name && !!errors.name}\n              />\n              {touched.name && errors.name && (\n                <ErrorText>{errors.name}</ErrorText>\n              )}\n            </InputContainer>\n\n            <InputContainer>\n              <Label>{t(\"Forms.editCompany.logo\")}</Label>\n              <ImageUploadField\n                name=\"logo\"\n                placeholderText={t(\"Forms.common.dragOrClick\")}\n                buttonText={t(\"Forms.common.chooseFile\")}\n                initialPreview={company.logo}\n              />\n            </InputContainer>\n          </StyledForm>\n        </>\n      )}\n    </Formik>\n  );\n};\n\nexport default EditCompanyForm;\n","import { useTranslation } from \"react-i18next\";\nimport Modal from \"@/components/Modal/Modal\";\nimport ModalLayout from \"@/components/Modal/ModalLayout\";\nimport EditCompanyForm from \"@/components/Forms/EditCompanyForm\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  deleteAction: () => void;\n  companyId: string;\n};\n\nconst EditCompanyModal = ({\n  handlerCloseModal,\n  deleteAction,\n  companyId,\n}: Props) => {\n  const { t } = useTranslation();\n  const formName = \"edit-company-form\";\n\n  return (\n    <Modal handlerCloseModal={handlerCloseModal}>\n      <ModalLayout\n        handlerCloseModal={handlerCloseModal}\n        title={t(\"Modals.editCompany.title\")}\n        formName={formName}\n        deleteAction={deleteAction}\n      >\n        <EditCompanyForm\n          handlerCloseModal={handlerCloseModal}\n          formName={formName}\n          companyId={companyId}\n        />\n      </ModalLayout>\n    </Modal>\n  );\n};\n\nexport default EditCompanyModal;\n","import styled from \"styled-components\";\n\nexport const LoadContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 295px;\n`;\n","import * as yup from \"yup\";\n\nexport const EditCompanyMembersSchema = yup.object().shape({\n  members: yup.array().of(yup.string().email()).min(1).required(),\n});\n","import { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch } from \"@/hooks\";\nimport { fetchCompanyById, updateMembers } from \"@/redux/companies/operations\";\nimport { Company } from \"@/redux/companies/companies.types\";\nimport Loader from \"@/components/Loader\";\nimport UserList from \"@/components/UserList\";\nimport { FormikSubmitObserver } from \"@/components/Modal\";\nimport { StyledForm } from \"@/styles/form/Form.styled\";\nimport { LoadContainer } from \"./EditCompanyMembersForm.styled\";\nimport { EditCompanyMembersSchema } from \"./EditCompanyMembersSchema\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  formName: string;\n  companyId: string;\n  withActions?: boolean;\n};\n\nconst EditCompanyMembersForm = ({\n  handlerCloseModal,\n  formName,\n  companyId,\n  withActions = true,\n}: Props) => {\n  const dispatch = useAppDispatch();\n  const [company, setCompany] = useState<Company | null>(null);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    const loadCompany = async () => {\n      try {\n        const result = await dispatch(fetchCompanyById(companyId)).unwrap();\n        setCompany(result);\n      } catch (error) {\n        toast.error(\n          `${t(\"Forms.editCompanyMembers.failedToLoad\")}: ${\n            error instanceof Error ? error.message : String(error)\n          }`\n        );\n        handlerCloseModal();\n      }\n    };\n\n    loadCompany();\n  }, [dispatch, companyId, t, handlerCloseModal]);\n\n  if (!company) {\n    return (\n      <LoadContainer>\n        <Loader size=\"60px\" color=\"#3e85f3\" />\n      </LoadContainer>\n    );\n  }\n\n  const initialValues = {\n    members: company.members.map((m) => m.email),\n  };\n\n  const handleSubmit = async (values: typeof initialValues) => {\n    try {\n      await dispatch(\n        updateMembers({ id: company._id, members: values.members })\n      ).unwrap();\n\n      toast.success(t(\"Forms.editCompanyMembers.success\") as string);\n      handlerCloseModal();\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.editCompanyMembers.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  const companyMembersWithRoles = company.members.map((member) => ({\n    ...member,\n    role:\n      company.owner.email === member.email\n        ? (\"owner\" as const)\n        : (\"member\" as const),\n  }));\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      validationSchema={EditCompanyMembersSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ values, setFieldValue }) => {\n        return (\n          <>\n            <FormikSubmitObserver />\n\n            <StyledForm id={formName}>\n              <UserList\n                value={values.members}\n                users={companyMembersWithRoles}\n                onChange={(updated) => setFieldValue(\"members\", updated)}\n                withActions={withActions}\n              />\n            </StyledForm>\n          </>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditCompanyMembersForm;\n","import { useTranslation } from \"react-i18next\";\nimport Modal from \"@/components/Modal/Modal\";\nimport ModalLayout from \"@/components/Modal/ModalLayout\";\nimport EditCompanyMembersForm from \"@/components/Forms/EditCompanyMembersForm\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  companyId: string;\n  withActions?: boolean;\n};\n\nconst EditCompanyMembersModal = ({\n  handlerCloseModal,\n  companyId,\n  withActions = true,\n}: Props) => {\n  const { t } = useTranslation();\n  const formName = \"edit-company-members-form\";\n\n  return (\n    <Modal handlerCloseModal={handlerCloseModal}>\n      <ModalLayout\n        handlerCloseModal={handlerCloseModal}\n        title={t(\"Modals.editCompanyMembers.title\")}\n        formName={formName}\n        withActions={withActions}\n      >\n        <EditCompanyMembersForm\n          handlerCloseModal={handlerCloseModal}\n          formName={formName}\n          companyId={companyId}\n          withActions={withActions}\n        />\n      </ModalLayout>\n    </Modal>\n  );\n};\n\nexport default EditCompanyMembersModal;\n","import styled from \"styled-components\";\n\nexport const Card = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 12px;\n  padding: 16px;\n  border: 1px solid ${({ theme }) => theme.borderColor};\n  border-radius: 4px;\n  background-color: ${({ theme }) => theme.background};\n`;\n\nexport const UpperBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const BottomBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const Logo = styled.img`\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  border-radius: 12px;\n  background-color: #ddd;\n`;\n\nexport const Name = styled.h3`\n  font-size: 18px;\n  font-weight: 600;\n  color: ${({ theme }) => theme.primaryText};\n  word-break: break-word;\n  overflow-wrap: break-word;\n`;\n\nexport const RoleBadge = styled.span<{ color: string }>`\n  font-size: 14px;\n  font-weight: 500;\n  color: ${({ theme }) => theme.roleTextColor};\n  background-color: ${({ color }) => color};\n  border-radius: 4px;\n  padding: 2px 8px;\n  align-self: start;\n`;\n\nexport const Actions = styled.div`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  display: flex;\n  gap: 8px;\n`;\n\nexport const IconButton = styled.button`\n  background: none;\n  border: none;\n  color: ${({ theme }) => theme.secondaryText};\n  cursor: pointer;\n  padding: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: color ${({ theme }) => theme.animation};\n\n  &:hover {\n    color: ${({ theme }) => theme.primary};\n  }\n`;\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTheme } from \"styled-components\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch, useAppSelector } from \"@/hooks\";\nimport { selectUserEmail } from \"@/redux/user/selectors\";\nimport { Company } from \"@/redux/companies/companies.types\";\nimport { deleteCompany } from \"@/redux/companies/operations\";\nimport MembersAvatarGroup from \"@/components/MembersAvatarGroup\";\nimport EditCompanyModal from \"@/components/Modals/EditCompanyModal\";\nimport EditCompanyMembersModal from \"@/components/Modals/EditCompanyMembersModal\";\nimport {\n  Card,\n  UpperBlock,\n  BottomBlock,\n  Logo,\n  Name,\n  RoleBadge,\n  Actions,\n  IconButton,\n} from \"./CompanyCard.styled\";\nimport { HiDotsVertical, HiUserGroup } from \"react-icons/hi\";\n\ntype Props = {\n  company: Company;\n};\n\nconst CompanyCard = ({ company }: Props) => {\n  const dispatch = useAppDispatch();\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isEditMembersModalOpen, setIsEditMembersModalOpen] = useState(false);\n  const myEmail = useAppSelector(selectUserEmail);\n  const { t } = useTranslation();\n  const theme = useTheme();\n\n  const toggleEditModal = () => {\n    setIsEditModalOpen((prev) => !prev);\n  };\n\n  const toggleMembersModal = () => {\n    setIsEditMembersModalOpen((prev) => !prev);\n  };\n\n  const handleDelete = async () => {\n    try {\n      await dispatch(deleteCompany(company._id));\n      toast.success(t(\"Forms.deleteCompany.success\") as string);\n      toggleEditModal();\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.deleteCompany.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  const role = company?.owner?.email === myEmail ? \"owner\" : \"member\";\n  const members = company.members;\n\n  const roleColors: Record<\"owner\" | \"member\", string> = {\n    owner: theme.roleOwner,\n    member: theme.roleMember,\n  };\n\n  return (\n    <>\n      <Card>\n        <UpperBlock>\n          <Logo src={company.logo} alt=\"Logo\" />\n\n          <Name>{company.name}</Name>\n        </UpperBlock>\n\n        <BottomBlock>\n          <RoleBadge color={roleColors[role]}>\n            {t(`Common.roles.${role}`)}\n          </RoleBadge>\n\n          <MembersAvatarGroup members={[...members].reverse()} />\n        </BottomBlock>\n\n        <Actions>\n          <IconButton onClick={toggleMembersModal}>\n            <HiUserGroup size={20} />\n          </IconButton>\n          {role === \"owner\" && (\n            <IconButton onClick={toggleEditModal}>\n              <HiDotsVertical size={20} />\n            </IconButton>\n          )}\n        </Actions>\n      </Card>\n      {isEditModalOpen && role === \"owner\" && (\n        <EditCompanyModal\n          handlerCloseModal={() => toggleEditModal()}\n          deleteAction={handleDelete}\n          companyId={company._id}\n        />\n      )}\n      {isEditMembersModalOpen && (\n        <EditCompanyMembersModal\n          handlerCloseModal={() => toggleMembersModal()}\n          companyId={company._id}\n          withActions={role === \"owner\"}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CompanyCard;\n","import * as yup from \"yup\";\n\nexport const CreateCompanySchema = yup.object({\n  name: yup.string().required(\"Required\"),\n  logo: yup.mixed().nullable(),\n});\n","import { Formik } from \"formik\";\nimport { toast } from \"react-toastify\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppDispatch } from \"@/hooks\";\nimport { createCompany } from \"@/redux/companies/operations\";\nimport ImageUploadField from \"@/components/ImageUploadField\";\nimport { FormikSubmitObserver } from \"@/components/Modal\";\nimport { CreateCompanySchema } from \"./CreateCompanySchema\";\nimport {\n  StyledForm,\n  InputContainer,\n  Label,\n  Input,\n  ErrorText,\n} from \"@/styles/form/Form.styled\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n  formName: string;\n};\n\nconst initialValues = {\n  name: \"\",\n  logo: null as File | null,\n};\n\nconst CreateCompanyForm = ({ handlerCloseModal, formName }: Props) => {\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  const handleSubmit = async (values: typeof initialValues) => {\n    const formData = new FormData();\n    formData.append(\"name\", values.name);\n\n    if (values.logo) {\n      formData.append(\"logo\", values.logo);\n    }\n\n    try {\n      await dispatch(createCompany(formData)).unwrap();\n      toast.success(t(\"Forms.createCompany.success\") as string);\n      handlerCloseModal();\n    } catch (error) {\n      toast.error(\n        `${t(\"Forms.createCompany.failed\")}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={CreateCompanySchema}\n      onSubmit={handleSubmit}\n    >\n      {({ errors, touched }) => (\n        <>\n          <FormikSubmitObserver />\n\n          <StyledForm id={formName}>\n            <InputContainer>\n              <Label>{t(\"Forms.createCompany.name\")}</Label>\n              <Input\n                name=\"name\"\n                placeholder={t(\"Forms.createCompany.namePlaceholder\")}\n                $hasError={touched.name && !!errors.name}\n              />\n              {touched.name && errors.name && (\n                <ErrorText>{errors.name}</ErrorText>\n              )}\n            </InputContainer>\n\n            <InputContainer>\n              <Label>{t(\"Forms.createCompany.logo\")}</Label>\n              <ImageUploadField\n                name=\"logo\"\n                placeholderText={t(\"Forms.common.dragOrClick\")}\n                buttonText={t(\"Forms.common.chooseFile\")}\n              />\n            </InputContainer>\n          </StyledForm>\n        </>\n      )}\n    </Formik>\n  );\n};\n\nexport default CreateCompanyForm;\n","import { useTranslation } from \"react-i18next\";\nimport Modal from \"@/components/Modal/Modal\";\nimport ModalLayout from \"@/components/Modal/ModalLayout\";\nimport CreateCompanyForm from \"@/components/Forms/CreateCompanyForm\";\n\ntype Props = {\n  handlerCloseModal: () => void;\n};\n\nconst CreateCompanyModal = ({ handlerCloseModal }: Props) => {\n  const { t } = useTranslation();\n  const formName = \"create-company-form\";\n\n  return (\n    <Modal handlerCloseModal={handlerCloseModal}>\n      <ModalLayout\n        handlerCloseModal={handlerCloseModal}\n        title={t(\"Modals.createCompany.title\")}\n        formName={formName}\n      >\n        <CreateCompanyForm\n          handlerCloseModal={handlerCloseModal}\n          formName={formName}\n        />\n      </ModalLayout>\n    </Modal>\n  );\n};\n\nexport default CreateCompanyModal;\n","import styled from \"styled-components\";\n\nexport const PageWrapper = styled.div`\n  padding: 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 48px;\n  height: 100%;\n`;\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const UpperBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n`;\n\nexport const PageHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 16px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: ${({ theme }) => theme.primaryText};\n`;\n\nexport const CreateButton = styled.button`\n  background-color: ${({ theme }) => theme.buttonBackground};\n  color: ${({ theme }) => theme.buttonText};\n  padding: 12px 24px;\n  border-radius: 4px;\n  border: none;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color ${({ theme }) => theme.animation};\n\n  &:hover {\n    background-color: ${({ theme }) => theme.buttonBackgroundHover};\n  }\n`;\n\nexport const TopBar = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  > * {\n    min-height: 44px;\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    align-items: center;\n  }\n`;\n\nexport const SearchInput = styled.input`\n  flex: 1;\n  padding: 12px 16px;\n  border: 1px solid ${({ theme }) => theme.borderColor};\n  border-radius: 4px;\n  background-color: ${({ theme }) => theme.background};\n  color: ${({ theme }) => theme.primaryText};\n  transition: border-color ${({ theme }) => theme.animation};\n\n  &::placeholder {\n    color: ${({ theme }) => theme.secondaryText};\n  }\n\n  &:focus {\n    border-color: ${({ theme }) => theme.primary};\n    outline: none;\n  }\n`;\n\nexport const SelectWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  width: 100%;\n\n  @media (min-width: 768px) {\n    width: 200px;\n  }\n`;\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 16px;\n\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: 1280px) {\n    grid-template-columns: 1fr;\n  }\n`;\n","import { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"@/hooks\";\nimport {\n  selectCompanies,\n  selectCompaniesLoading,\n} from \"@/redux/companies/selectors\";\nimport Loader from \"@/components/Loader\";\nimport CustomSelect from \"@/components/CustomSelect\";\nimport CompanyCard from \"@/components/CompanyCard\";\nimport CreateCompanyModal from \"@/components/Modals/CreateCompanyModal\";\nimport {\n  PageWrapper,\n  PageHeader,\n  Title,\n  TopBar,\n  SearchInput,\n  Grid,\n  CreateButton,\n  SelectWrapper,\n  UpperBlock,\n  LoaderContainer,\n} from \"./CompanyPage.styled\";\n\nconst CompanyPage = () => {\n  const [search, setSearch] = useState(\"\");\n  const [sort, setSort] = useState(\"name\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const loading = useAppSelector(selectCompaniesLoading);\n  const companies = useAppSelector(selectCompanies);\n  const { t } = useTranslation();\n\n  const toggleCreateModal = () => {\n    setIsCreateModalOpen((prev) => !prev);\n  };\n\n  const filteredCompanies = useMemo(() => {\n    return companies\n      .filter((company) =>\n        company.name.toLowerCase().includes(search.toLowerCase())\n      )\n      .sort((a, b) => {\n        if (sort === \"name\") {\n          return a.name.localeCompare(b.name);\n        }\n        if (sort === \"date\") {\n          return (\n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          );\n        }\n        return 0;\n      });\n  }, [companies, search, sort]);\n\n  return (\n    <PageWrapper>\n      {loading ? (\n        <LoaderContainer>\n          <Loader size=\"48px\" color=\"#3e85f3\" />\n        </LoaderContainer>\n      ) : (\n        <>\n          <UpperBlock>\n            <PageHeader>\n              <Title>{t(\"Companies.title\")}</Title>\n              <CreateButton onClick={() => toggleCreateModal()}>\n                {t(\"Companies.create\")}\n              </CreateButton>\n            </PageHeader>\n\n            <TopBar>\n              <SearchInput\n                type=\"text\"\n                placeholder={t(\"Companies.searchPlaceholder\")}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <SelectWrapper>\n                <CustomSelect\n                  options={[\"name\", \"date\"]}\n                  value={sort}\n                  onChange={setSort}\n                  getLabel={(r) => t(`Companies.filters.${r}`)}\n                  getKey={(r) => r}\n                />\n              </SelectWrapper>\n            </TopBar>\n          </UpperBlock>\n\n          <Grid>\n            {filteredCompanies.map((company) => (\n              <CompanyCard key={company._id} company={company} />\n            ))}\n          </Grid>\n          {isCreateModalOpen && (\n            <CreateCompanyModal handlerCloseModal={toggleCreateModal} />\n          )}\n        </>\n      )}\n    </PageWrapper>\n  );\n};\n\nexport default CompanyPage;\n"],"names":["FileDropZone","styled","div","_ref","theme","isDragActive","background","backgroundSecondary","_ref2","primary","borderColor","_ref3","animation","_ref4","UploadText","_ref5","secondaryText","UploadButton","button","_ref6","_ref7","_ref8","_ref9","_ref10","PreviewImage","img","HiddenFileInput","input","IconWrapper","name","placeholderText","buttonText","initialPreview","useTheme","fileInputRef","useRef","field","meta","helpers","useField","preview","setPreview","useState","dragActive","setDragActive","useEffect","value","handleFileChange","file","setValue","URL","createObjectURL","_jsxs","_Fragment","children","_jsx","onClick","_fileInputRef$current","current","click","onDragEnter","e","preventDefault","onDragLeave","onDragOver","onDrop","dataTransfer","files","src","alt","FaRegBuilding","size","color","type","ref","accept","onChange","_e$target$files","target","touched","error","ErrorText","LoadContainer","EditCompanySchema","yup","required","logo","nullable","handlerCloseModal","formName","companyId","dispatch","useAppDispatch","t","useTranslation","company","setCompany","async","result","fetchCompanyById","unwrap","toast","Error","message","String","loadCompany","initialValues","Formik","enableReinitialize","validationSchema","onSubmit","formData","FormData","append","values","updateCompany","id","success","errors","FormikSubmitObserver","StyledForm","InputContainer","Label","Input","placeholder","$hasError","ImageUploadField","Loader","deleteAction","Modal","ModalLayout","title","EditCompanyForm","EditCompanyMembersSchema","shape","members","of","email","min","withActions","map","m","companyMembersWithRoles","member","role","owner","updateMembers","_id","setFieldValue","UserList","users","updated","EditCompanyMembersForm","Card","UpperBlock","BottomBlock","Logo","Name","h3","primaryText","RoleBadge","span","roleTextColor","Actions","IconButton","_company$owner","isEditModalOpen","setIsEditModalOpen","isEditMembersModalOpen","setIsEditMembersModalOpen","myEmail","useAppSelector","selectUserEmail","toggleEditModal","prev","toggleMembersModal","roleColors","roleOwner","roleMember","MembersAvatarGroup","reverse","HiUserGroup","HiDotsVertical","EditCompanyModal","deleteCompany","EditCompanyMembersModal","CreateCompanySchema","createCompany","CreateCompanyForm","PageWrapper","LoaderContainer","PageHeader","Title","h2","CreateButton","buttonBackground","buttonBackgroundHover","TopBar","SearchInput","_ref11","SelectWrapper","Grid","CompanyPage","search","setSearch","sort","setSort","isCreateModalOpen","setIsCreateModalOpen","loading","selectCompaniesLoading","companies","selectCompanies","toggleCreateModal","filteredCompanies","useMemo","filter","toLowerCase","includes","a","b","localeCompare","Date","createdAt","getTime","CustomSelect","options","getLabel","r","getKey","CompanyCard","CreateCompanyModal"],"sourceRoot":""}